/*
 * 
 */
package uk.co.ariley.armenu;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import uk.co.ariley.armenu.schema.types.AbstractMenuItemType;
import uk.co.ariley.armenu.schema.types.MenuGroupType;
import uk.co.ariley.armenu.schema.types.MenuItemType;

/**
 *
 * @author ariley
 */
public class MenuItemPropertiesDialog extends javax.swing.JDialog {
    
    private AbstractMenuItemType oldValue;
    
    /** When adding a new item, whether it is a menu item or a group */
    private boolean newMenuGroup;

    /**
     * Creates new form MenuItemPropertiesDialog
     */
    public MenuItemPropertiesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        propertiesPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        iconTextField = new javax.swing.JTextField();
        iconBrowseButton = new javax.swing.JButton();
        commandLabel = new javax.swing.JLabel();
        commandTextField = new javax.swing.JTextField();
        commandBrowseButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Properties");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        mainPanel.setLayout(new java.awt.BorderLayout());

        propertiesPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(jLabel1, gridBagConstraints);

        nameTextField.setColumns(24);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(nameTextField, gridBagConstraints);

        jLabel2.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(jLabel2, gridBagConstraints);

        descriptionTextField.setColumns(24);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(descriptionTextField, gridBagConstraints);

        jLabel3.setText("Icon");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(jLabel3, gridBagConstraints);

        iconTextField.setColumns(24);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(iconTextField, gridBagConstraints);

        iconBrowseButton.setText("Browse...");
        iconBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(iconBrowseButton, gridBagConstraints);

        commandLabel.setText("Command");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(commandLabel, gridBagConstraints);

        commandTextField.setColumns(24);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(commandTextField, gridBagConstraints);

        commandBrowseButton.setText("Browse...");
        commandBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        propertiesPanel.add(commandBrowseButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        propertiesPanel.add(jSeparator1, gridBagConstraints);

        mainPanel.add(propertiesPanel, java.awt.BorderLayout.CENTER);

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        mainPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iconBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconBrowseButtonActionPerformed
        JFileChooser iconFileChooser;
        String iconPath = iconTextField.getText();
        if (iconPath != null && iconPath.trim().length() > 0) {
            File iconFile = new File(iconPath);
            iconFileChooser = new JFileChooser(iconFile.getParent());
            iconFileChooser.setSelectedFile(iconFile);
        } else {
            iconFileChooser = new JFileChooser();
        }
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "gif", "jpg", "jpeg", "png");
        iconFileChooser.setFileFilter(filter);
        int returnVal = iconFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            iconTextField.setText(iconFileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_iconBrowseButtonActionPerformed

    private void commandBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandBrowseButtonActionPerformed
        JFileChooser fileChooser;
        String command = commandTextField.getText();
        if (command != null && command.trim().length() > 0) {
            command = command.trim();
            boolean inQuotedString = false;
            boolean done = false;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; !done && i < command.length(); i++) {
                char c = command.charAt(i);
                switch(c) {
                    case '\\': {
                        sb.append(command.charAt(++i));
                        break;
                    }
                    case '"': {
                        inQuotedString = !inQuotedString;
                        break;
                    }
                    case ' ': {
                        if (inQuotedString) {
                            sb.append(c);
                        } else {
                            done = true;
                        }
                        break;
                    }
                    default: {
                        sb.append(c);
                        break;
                    }
                }
            }
            File file = new File(sb.toString());
            fileChooser = new JFileChooser(file.getParent());
            fileChooser.setSelectedFile(file);
        } else {
            fileChooser = new JFileChooser();
        }
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            commandTextField.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_commandBrowseButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Validation
        boolean ok = true;
        String name = nameTextField.getText();
        if (name == null || name.trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "Name is required", "Error",
                    JOptionPane.ERROR_MESSAGE);
            ok = false;
        }
        if (commandTextField.isVisible()) {
            String command = commandTextField.getText();
            if (command == null || command.trim().length() == 0) {
                JOptionPane.showMessageDialog(this, "Command is required", "Error",
                        JOptionPane.ERROR_MESSAGE);
                ok = false;
            }
        }
        if (ok) {
            this.setVisible(false);
            
            AbstractMenuItemType newValue = getValue();
            PropertyChangeEvent event = new PropertyChangeEvent(this, "value", oldValue, newValue);
            for (PropertyChangeListener listener : getPropertyChangeListeners()) {
                listener.propertyChange(event);
            }
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed


    public AbstractMenuItemType getValue() {
        AbstractMenuItemType menuItem;
        if (commandTextField.isVisible()) {
            MenuItemType menuItemType = new MenuItemType();
//            menuItemType.setCommand(commandTextField.getText());
            menuItem = menuItemType;
        } else {
            menuItem = new MenuGroupType();
        }
        menuItem.setName(nameTextField.getText());
        menuItem.setDescription(descriptionTextField.getText());
        menuItem.setIcon(iconTextField.getText());
        
        return menuItem;
    }


    public void setValue(AbstractMenuItemType menuItem) {
        oldValue = menuItem;
        if (menuItem != null) {
            nameTextField.setText(menuItem.getName());            
            descriptionTextField.setText(menuItem.getDescription());            
            iconTextField.setText(menuItem.getIcon());
            if (menuItem instanceof MenuItemType) {
//                commandTextField.setText(((MenuItemType) menuItem).getCommand());
            } else {
                hideCommandComponents();
            }
        }
    }


    public boolean isNewMenuGroup() {
        return newMenuGroup;
    }


    public void setNewSubmenu(boolean newMenuGroup) {
        this.newMenuGroup = newMenuGroup;
        if (newMenuGroup) {
            hideCommandComponents();
        }
    }


    private String[] parseCommand(String command) {
        final List<String> tokens = new ArrayList<String>();

        boolean inQuotedString = false;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < command.length(); i++) {
            char c = command.charAt(i);

            switch (c) {
                case '\\': {
                    ++i;
                    if (i < command.length()) {
                        sb.append(command.charAt(i));
                    }
                    break;
                }

                case '"': {
                    inQuotedString = !inQuotedString;
                    break;
                }

                case ' ': {
                    if (inQuotedString) {
                        sb.append(c);
                    } else {
                        tokens.add(sb.toString());
                        sb = new StringBuilder();
                    }
                    break;
                }

                default: {
                    sb.append(c);
                    break;
                }
            }

        }

        if (sb.length() > 0) {
            tokens.add(sb.toString());
        }


        return tokens.toArray(new String[tokens.size()]);
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info :
                    javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuItemPropertiesDialog.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuItemPropertiesDialog.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuItemPropertiesDialog.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuItemPropertiesDialog.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MenuItemPropertiesDialog dialog =
                        new MenuItemPropertiesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton commandBrowseButton;
    private javax.swing.JLabel commandLabel;
    private javax.swing.JTextField commandTextField;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JButton iconBrowseButton;
    private javax.swing.JTextField iconTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel propertiesPanel;
    // End of variables declaration//GEN-END:variables


    private void hideCommandComponents() {
        commandLabel.setVisible(false);
        commandTextField.setVisible(false);
        commandBrowseButton.setVisible(false);
    }
}
